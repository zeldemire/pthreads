Script started on Mon 02 Nov 2015 02:04:29 AM EST
]0;eldemizt@ceclnx01: ~/cse381/HW4eldemizt@ceclnx01:~/cse381/HW4$ cat README 
Zach Eldemire 
Nic Moore
Julius Ware

For our implementation we created temporary variables that pointed to the structs. These temporary variables were used to edit the string that was stored in the struct.
Our implementation is correct because it passes all of the tests. We used office hours and the man pages. We spent 12 hrs on this assignment. The only difficulty that we encountered was in the join_on_enzymes method. 
]0;eldemizt@ceclnx01: ~/cse381/HW4eldemizt@ceclnx01:~/cse381/HW4$ cat A-Questions.txt 
Part A
1) If you were to use multiple processes the processes wonâ€™t be able to share data, while if you use threads they will be because they share same process.
2) Workperformed is used signal if a thread is in the middle of a swap. It is set equal to 1 if a thread is in the process of a swapping.
3) The type of fp is a void pointer.
]0;eldemizt@ceclnx01: ~/cse381/HW4eldemizt@ceclnx01:~/cse381/HW4$ cat C-Questions.txt 
1) we donâ€™t detach because we want the threads to wait for each other to finish. I few were to detach one might finish before the other and mess up the string in a way that when another thread looks at it, it does the wrong thing.
2)The program uses sched_yield because after a thread has made a change to the string it should wait until it is able to make another change. If it is not used the threads will not wait. No because the threads are working on the string at different times.
3)You donâ€™t include the canceled threads because those threads donâ€™t go into the while loop where the swap count is incremented.
4)When a thread joins it self it will run forever because it is waiting for itself to terminate while also trying to join itself.
5)The sleeper thread is created in the main method to return and send a cancellation message to the threads if a certain time limit has reached.
6) PTHREAD_CANCEL_ASYNCHRONOUS is used because the threads are just doing basic computations, also for the fact that a thread needs to be canceled whenever there is a cancellation request.
7)The bug in part b #2 was that this function was only allocating memory for one thread instead of all of them.
]0;eldemizt@ceclnx01: ~/cse381/HW4eldemizt@ceclnx01:~/cse381/HW4$ cat enzyme.c
#include "enzyme.h"

int please_quit;
int use_yield;
int workperformed;

// The code each enzyme executes.
void *run_enzyme(void *data) {
	/* This function should :
	1. cast the void* pointer to thread_info_t*
	2. initialize the swapcount to zero
	3. Set the cancel type to PTHREAD_CANCEL_ASYNCHRONOUS
	4. If the first letter of the string is a C then call pthread_cancel on this thread.
	5. Create a while loop that only exits when please_quit is nonzero
	6. Within this loop: if the first character of the string has an ascii value greater than the second (s[0] >s[1]) then -
		Set workperformed=1, increment swapcount for this thread, then swap the two characters around
		If "use_yield" is nonzero then call pthread_yield at the end of the loop.
	7. Return a pointer to the updated structure.
	*/
	//1,2
	thread_info_t *info = (thread_info_t *)data;
	char *ch = info->string;
	info->swapcount = 0;

	//3
	int value;
	pthread_setcanceltype(PTHREAD_CANCEL_ASYNCHRONOUS, &value);

	//4
	if (ch[0] == 'C') {
		please_quit = pthread_cancel(pthread_self());
	}

	//5
    char *tmp;
	while(please_quit == 0) {
		if(((thread_info_t *)data)->string[0] > ((thread_info_t *)data)->string[1]) {
            workperformed = 1;
            info->swapcount++;
            tmp = ch[0];
            ch[0] = ch[1];
            ch[1] = tmp;
        }
	sched_yield();
	}
	return (void *)info;
}


// Make threads to sort string.
// Returns the number of threads created.
// There is a memory bug in this function.
int make_enzyme_threads(pthread_t * enzymes, char *string, void *(*fp)(void *)) {
	int i,rv,len;
	thread_info_t *info;
	len = (int) strlen(string);

	for(i=0;i<len-1;i++) {
	    info = (thread_info_t *)malloc(sizeof(thread_info_t));
	    info->string = string+i;
	    rv = pthread_create(enzymes+i,NULL,fp,info);
	    if (rv) {
	        fprintf(stderr,"Could not create thread %d : %s\n",
			i,strerror(rv));
		exit(1);
	    }
	}  
	return len-1;
}




// Join all threads at the end.
// Returns the total number of swaps.
int join_on_enzymes(pthread_t *threads, int n) {
	int i;
	int totalswapcount = 0;
	int cancel_count=0; // just to make the code compile 
	                    // you will need to edit the code below
	for(i=0;i<n;i++) {
	    void *status;
	    int rv = pthread_join(threads[i],&status);

        if(rv!=0) {
	    fprintf(stderr,"Can't join thread %d:%s.\n",i,strerror(rv));
	    continue;
	}

	if (status == PTHREAD_CANCELED) {
	   	cancel_count++;
		 continue;
	} else if (status == NULL) {
	    printf("Thread %d did not return anything\n",i);
	    } else {
	      printf("Thread %d exited normally: ",i);// Don't change this line
	      thread_info_t *info = (thread_info_t*) status;
	      // Hint - you will need to cast something.
	      printf("%d swaps.\n",info->swapcount); // Don't change this line
	      totalswapcount += info->swapcount;// Don't change this line
	    }
	}	
	return totalswapcount;
}

/* Wait until the string is in order. Note, we need the workperformed flag just in case a thread is in the middle of swapping characters
so that the string temporarily is in order because the swap is not complete.
*/
void wait_till_done(char *string, int n) {
	int i;
	while(1) {
	    sched_yield();
	    workperformed=0;
	    for(i=0;i<n;i++) 
	        if (string[i] > string[i+1]) {
	            workperformed=1;
	    	}
	    if(workperformed==0) break;
	}
}

void * sleeper_func(void *p) {
	sleep( (int) p); 
	// Actually this may return before p seconds because of signals. 
	// See man sleep for more information
	printf("sleeper func woke up - exiting the program\n");
	exit(1);
}

int smp2_main(int argc, char **argv) {
	pthread_t enzymes[MAX];
	int n,totalswap;
	char string[MAX];

	if (argc <= 1) {
	    fprintf(stderr,"Usage: %s <word>\n",argv[0]);
	    exit(1);
	}
	strncpy(string,argv[1],MAX); // Why is this necessary? Why cant we give argv[1] directly to the thread functions?

	please_quit = 0;
	use_yield =1;
	
	printf("Creating threads...\n");
	n = make_enzyme_threads(enzymes,string,run_enzyme);
	printf("Done creating %d threads.\n",n);
	
	pthread_t sleeperid;
	pthread_create(&sleeperid,NULL,sleeper_func,(void*)5);

	wait_till_done(string,n);
	please_quit = 1;
	printf("Joining threads...\n");
	totalswap = join_on_enzymes(enzymes, n);
	printf("Total: %d swaps\n",totalswap);
	printf("Sorted string: %s\n",string);
	
	exit(0);
}



]0;eldemizt@ceclnx01: ~/cse381/HW4eldemizt@ceclnx01:~/cse381/HW4$ make
make: Nothing to be done for `all'.
]0;eldemizt@ceclnx01: ~/cse381/HW4eldemizt@ceclnx01:~/cse381/HW4$ make test
./enzyme -test -f0 all
Running tests...
 1.make                ::pass
 2.sort                ::pass
 3.pleasequit1         ::pass
 4.pleasequit0         ::pass
 5.swap1               ::pass
 6.swap2               ::pass
 7.swap3               ::pass
 8.run_enzyme          ::pass
 9.join                ::pass
10.cancel              ::pass

Test Results:10 tests,10 passed,0 failed.
]0;eldemizt@ceclnx01: ~/cse381/HW4eldemizt@ceclnx01:~/cse381/HW4$ exit

Script done on Mon 02 Nov 2015 02:05:16 AM EST
